local opc={
  ['00E0'] = {me='CLS',  desc="Clears the screen."},
  ['00EE'] = {me='RET',  desc="Returns from a subroutine."},
  ['1NNN'] = {me='JP',   desc="Jumps to address NNN."},
  ['2NNN'] = {me='CALL', desc="Calls subroutine at NNN."},
  ['3XNN'] = {me='SE',   desc="Skips the next instruction if VX equals NN."},
  ['4XNN'] = {me='SNE',  desc="Skips the next instruction if VX doesn't equal NN."},
  ['5XY0'] = {me='SE',   desc="Skips the next instruction if VX equals VY."},
  ['6XNN'] = {me='LD',   desc="Sets VX to NN."},
  ['7XNN'] = {me='ADD',  desc="Adds NN to VX."},
  ['8XY0'] = {me='LD',   desc="Sets VX to the value of VY."},
  ['8XY1'] = {me='OR',   desc="Sets VX to VX or VY."},
  ['8XY2'] = {me='AND',  desc="Sets VX to VX and VY."},
  ['8XY3'] = {me='XOR',  desc="Sets VX to VX xor VY."},
  ['8XY4'] = {me='ADD',  desc="Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there isn't."},
  ['8XY5'] = {me='SUB',  desc="VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there isn't."},
  ['8XY6'] = {me='SHR',  desc="Shifts VX right by one. VF is set to the value of the least significant bit of VX before the shift.[2]"},
  ['8XY7'] = {me='SUBN', desc="Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there isn't."},
  ['8XYE'] = {me='SHL',  desc="Shifts VX left by one. VF is set to the value of the most significant bit of VX before the shift.[2]"},
  ['9XY0'] = {me='SNE',  desc="Skips the next instruction if VX doesn't equal VY."},
  ['ANNN'] = {me='LD',   desc="Sets I to the address NNN."},
  ['BNNN'] = {me='JP',   desc="Jumps to the address NNN plus V0."},
  ['CXNN'] = {me='RND',  desc="Sets VX to a random number and NN."},
  ['DXYN'] = {me='DRW',  desc="Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of N pixels. Each row of 8 pixels is read as bit-coded (with the most significant bit of each byte displayed on the left) starting from memory location I; I value doesn't change after the execution of this instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that doesn't happen."},
  ['EX9E'] = {me='SKP',  desc="Skips the next instruction if the key stored in VX is pressed."},
  ['EXA1'] = {me='SKNP', desc="Skips the next instruction if the key stored in VX isn't pressed."},
  ['FX07'] = {me='LD',   desc="Sets VX to the value of the delay timer."},
  ['FX0A'] = {me='LD',   desc="A key press is awaited, and then stored in VX."},
  ['FX15'] = {me='LD',   desc="Sets the delay timer to VX."},
  ['FX18'] = {me='LD',   desc="Sets the sound timer to VX."},
  ['FX1E'] = {me='ADD',  desc="Adds VX to I.[3]"},
  ['FX29'] = {me='LD',   desc="Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font."},
  ['FX33'] = {me='LD',   desc="Stores the Binary-coded decimal representation of VX, with the most significant of three digits at the address in I, the middle digit at I plus 1, and the least significant digit at I plus 2. (In other words, take the decimal representation of VX, place the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.)"},
  ['FX55'] = {me='LD',   desc="Stores V0 to VX in memory starting at address I.[4]"},
  ['FX65'] = {me='LD',   desc="Fills V0 to VX with values from memory starting at address I.[4]"},
  ['0000'] = {me='nop',  desc="Does nothing."},
  --['0NNN'] = {me='SYS',  desc="Calls RCA 1802 program at address NNN."},

}

return opc